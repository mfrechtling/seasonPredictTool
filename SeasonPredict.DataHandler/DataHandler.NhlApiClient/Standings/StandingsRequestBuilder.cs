// <auto-generated/>
#pragma warning disable CS0618
using DataHandler.NhlApiClient.Models;
using DataHandler.NhlApiClient.Standings.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace DataHandler.NhlApiClient.Standings
{
    /// <summary>
    /// Builds and executes requests for operations under \standings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StandingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the DataHandler.NhlApiClient.standings.item collection</summary>
        /// <param name="position">Standing types:  * `byConference` - Standings by Conference  * `byDivision` - Standings by Division  * `byLeague` - Standings by League  * `divisionLeaders` - Division Leader standings  * `postseason` - Postseason Standings  * `preseason` - Preseason Standings  * `regularSeason` - Regular Season Standings  * `wildCard` - Wild card standings  * `wildCardWithLeaders` - Wild card standings with Division Leaders</param>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Standings.Item.WithTypeItemRequestBuilder"/></returns>
        public global::DataHandler.NhlApiClient.Standings.Item.WithTypeItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("type", position);
                return new global::DataHandler.NhlApiClient.Standings.Item.WithTypeItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StandingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/standings{?date*,season*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StandingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/standings{?date*,season*}", rawUrl)
        {
        }
        /// <summary>
        /// Get NHL division standings.
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.Standings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::DataHandler.NhlApiClient.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::DataHandler.NhlApiClient.Models.Standings?> GetAsync(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder.StandingsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::DataHandler.NhlApiClient.Models.Standings> GetAsync(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder.StandingsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::DataHandler.NhlApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::DataHandler.NhlApiClient.Models.Standings>(requestInfo, global::DataHandler.NhlApiClient.Models.Standings.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get NHL division standings.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder.StandingsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder.StandingsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get NHL division standings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StandingsRequestBuilderGetQueryParameters 
        {
            /// <summary>Standings on a specified date.</summary>
            [QueryParameter("date")]
            public Date? Date { get; set; }
            /// <summary>Standings for a specified season.</summary>
            [QueryParameter("season")]
            public Date? Season { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StandingsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder.StandingsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

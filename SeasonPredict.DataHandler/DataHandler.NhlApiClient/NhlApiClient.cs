// <auto-generated/>
#pragma warning disable CS0618
using DataHandler.NhlApiClient.Conferences;
using DataHandler.NhlApiClient.Divisions;
using DataHandler.NhlApiClient.Draft;
using DataHandler.NhlApiClient.Game;
using DataHandler.NhlApiClient.People;
using DataHandler.NhlApiClient.Schedule;
using DataHandler.NhlApiClient.Standings;
using DataHandler.NhlApiClient.StandingsTypes;
using DataHandler.NhlApiClient.StatTypes;
using DataHandler.NhlApiClient.Teams;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace DataHandler.NhlApiClient
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NhlApiClient : BaseRequestBuilder
    {
        /// <summary>The conferences property</summary>
        public global::DataHandler.NhlApiClient.Conferences.ConferencesRequestBuilder Conferences
        {
            get => new global::DataHandler.NhlApiClient.Conferences.ConferencesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The divisions property</summary>
        public global::DataHandler.NhlApiClient.Divisions.DivisionsRequestBuilder Divisions
        {
            get => new global::DataHandler.NhlApiClient.Divisions.DivisionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The draft property</summary>
        public global::DataHandler.NhlApiClient.Draft.DraftRequestBuilder Draft
        {
            get => new global::DataHandler.NhlApiClient.Draft.DraftRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The game property</summary>
        public global::DataHandler.NhlApiClient.Game.GameRequestBuilder Game
        {
            get => new global::DataHandler.NhlApiClient.Game.GameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The people property</summary>
        public global::DataHandler.NhlApiClient.People.PeopleRequestBuilder People
        {
            get => new global::DataHandler.NhlApiClient.People.PeopleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedule property</summary>
        public global::DataHandler.NhlApiClient.Schedule.ScheduleRequestBuilder Schedule
        {
            get => new global::DataHandler.NhlApiClient.Schedule.ScheduleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The standings property</summary>
        public global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder Standings
        {
            get => new global::DataHandler.NhlApiClient.Standings.StandingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The standingsTypes property</summary>
        public global::DataHandler.NhlApiClient.StandingsTypes.StandingsTypesRequestBuilder StandingsTypes
        {
            get => new global::DataHandler.NhlApiClient.StandingsTypes.StandingsTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The statTypes property</summary>
        public global::DataHandler.NhlApiClient.StatTypes.StatTypesRequestBuilder StatTypes
        {
            get => new global::DataHandler.NhlApiClient.StatTypes.StatTypesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder Teams
        {
            get => new global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.NhlApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NhlApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://statsapi.web.nhl.com/api/v1";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618

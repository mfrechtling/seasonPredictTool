// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Team : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The abbreviation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Abbreviation { get; set; }
#nullable restore
#else
        public string Abbreviation { get; set; }
#endif
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The conference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Team_conference? Conference { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Team_conference Conference { get; set; }
#endif
        /// <summary>The division property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Team_division? Division { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Team_division Division { get; set; }
#endif
        /// <summary>The firstYearOfPlay property</summary>
        public double? FirstYearOfPlay { get; set; }
        /// <summary>The franchise property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Franchise? Franchise { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Franchise Franchise { get; set; }
#endif
        /// <summary>The franchiseId property</summary>
        public double? FranchiseId { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The locationName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationName { get; set; }
#nullable restore
#else
        public string LocationName { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nextGameSchedule property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Team_nextGameSchedule? NextGameSchedule { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Team_nextGameSchedule NextGameSchedule { get; set; }
#endif
        /// <summary>The officialSiteUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OfficialSiteUrl { get; set; }
#nullable restore
#else
        public string OfficialSiteUrl { get; set; }
#endif
        /// <summary>The roster property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Team_roster? Roster { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Team_roster Roster { get; set; }
#endif
        /// <summary>The shortName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortName { get; set; }
#nullable restore
#else
        public string ShortName { get; set; }
#endif
        /// <summary>The teamName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamName { get; set; }
#nullable restore
#else
        public string TeamName { get; set; }
#endif
        /// <summary>The triCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TriCode { get; set; }
#nullable restore
#else
        public string TriCode { get; set; }
#endif
        /// <summary>The venue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Venue? Venue { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Venue Venue { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.Team"/> and sets the default values.
        /// </summary>
        public Team()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.Team"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.Team CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.Team();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "abbreviation", n => { Abbreviation = n.GetStringValue(); } },
                { "active", n => { Active = n.GetBoolValue(); } },
                { "conference", n => { Conference = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Team_conference>(global::DataHandler.NhlApiClient.Models.Team_conference.CreateFromDiscriminatorValue); } },
                { "division", n => { Division = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Team_division>(global::DataHandler.NhlApiClient.Models.Team_division.CreateFromDiscriminatorValue); } },
                { "firstYearOfPlay", n => { FirstYearOfPlay = n.GetDoubleValue(); } },
                { "franchise", n => { Franchise = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Franchise>(global::DataHandler.NhlApiClient.Models.Franchise.CreateFromDiscriminatorValue); } },
                { "franchiseId", n => { FranchiseId = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "link", n => { Link = n.GetStringValue(); } },
                { "locationName", n => { LocationName = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nextGameSchedule", n => { NextGameSchedule = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Team_nextGameSchedule>(global::DataHandler.NhlApiClient.Models.Team_nextGameSchedule.CreateFromDiscriminatorValue); } },
                { "officialSiteUrl", n => { OfficialSiteUrl = n.GetStringValue(); } },
                { "roster", n => { Roster = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Team_roster>(global::DataHandler.NhlApiClient.Models.Team_roster.CreateFromDiscriminatorValue); } },
                { "shortName", n => { ShortName = n.GetStringValue(); } },
                { "teamName", n => { TeamName = n.GetStringValue(); } },
                { "triCode", n => { TriCode = n.GetStringValue(); } },
                { "venue", n => { Venue = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Venue>(global::DataHandler.NhlApiClient.Models.Venue.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("abbreviation", Abbreviation);
            writer.WriteBoolValue("active", Active);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Team_conference>("conference", Conference);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Team_division>("division", Division);
            writer.WriteDoubleValue("firstYearOfPlay", FirstYearOfPlay);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Franchise>("franchise", Franchise);
            writer.WriteDoubleValue("franchiseId", FranchiseId);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("link", Link);
            writer.WriteStringValue("locationName", LocationName);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Team_nextGameSchedule>("nextGameSchedule", NextGameSchedule);
            writer.WriteStringValue("officialSiteUrl", OfficialSiteUrl);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Team_roster>("roster", Roster);
            writer.WriteStringValue("shortName", ShortName);
            writer.WriteStringValue("teamName", TeamName);
            writer.WriteStringValue("triCode", TriCode);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Venue>("venue", Venue);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

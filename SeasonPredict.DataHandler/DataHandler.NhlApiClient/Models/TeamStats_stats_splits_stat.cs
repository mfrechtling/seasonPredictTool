// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamStats_stats_splits_stat : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The evGGARatio property</summary>
        public float? EvGGARatio { get; set; }
        /// <summary>The faceOffsLost property</summary>
        public double? FaceOffsLost { get; set; }
        /// <summary>The faceOffsTaken property</summary>
        public double? FaceOffsTaken { get; set; }
        /// <summary>The faceOffsWon property</summary>
        public double? FaceOffsWon { get; set; }
        /// <summary>The faceOffWinPercentage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FaceOffWinPercentage { get; set; }
#nullable restore
#else
        public string FaceOffWinPercentage { get; set; }
#endif
        /// <summary>The gamesPlayed property</summary>
        public double? GamesPlayed { get; set; }
        /// <summary>The goalsAgainstPerGame property</summary>
        public float? GoalsAgainstPerGame { get; set; }
        /// <summary>The goalsPerGame property</summary>
        public float? GoalsPerGame { get; set; }
        /// <summary>The losses property</summary>
        public double? Losses { get; set; }
        /// <summary>The ot property</summary>
        public double? Ot { get; set; }
        /// <summary>The penaltyKillPercentage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PenaltyKillPercentage { get; set; }
#nullable restore
#else
        public string PenaltyKillPercentage { get; set; }
#endif
        /// <summary>The powerPlayGoals property</summary>
        public double? PowerPlayGoals { get; set; }
        /// <summary>The powerPlayGoalsAgainst property</summary>
        public double? PowerPlayGoalsAgainst { get; set; }
        /// <summary>The powerPlayOpportunities property</summary>
        public double? PowerPlayOpportunities { get; set; }
        /// <summary>The powerPlayPercentage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PowerPlayPercentage { get; set; }
#nullable restore
#else
        public string PowerPlayPercentage { get; set; }
#endif
        /// <summary>The ptPctg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PtPctg { get; set; }
#nullable restore
#else
        public string PtPctg { get; set; }
#endif
        /// <summary>The pts property</summary>
        public double? Pts { get; set; }
        /// <summary>The savePctg property</summary>
        public float? SavePctg { get; set; }
        /// <summary>The shootingPctg property</summary>
        public float? ShootingPctg { get; set; }
        /// <summary>The shotsAllowed property</summary>
        public float? ShotsAllowed { get; set; }
        /// <summary>The shotsPerGame property</summary>
        public float? ShotsPerGame { get; set; }
        /// <summary>The winLeadFirstPer property</summary>
        public float? WinLeadFirstPer { get; set; }
        /// <summary>The winLeadSecondPer property</summary>
        public float? WinLeadSecondPer { get; set; }
        /// <summary>The winOppScoreFirst property</summary>
        public float? WinOppScoreFirst { get; set; }
        /// <summary>The winOutshootOpp property</summary>
        public float? WinOutshootOpp { get; set; }
        /// <summary>The winOutshotByOpp property</summary>
        public float? WinOutshotByOpp { get; set; }
        /// <summary>The wins property</summary>
        public double? Wins { get; set; }
        /// <summary>The winScoreFirst property</summary>
        public float? WinScoreFirst { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.TeamStats_stats_splits_stat"/> and sets the default values.
        /// </summary>
        public TeamStats_stats_splits_stat()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.TeamStats_stats_splits_stat"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.TeamStats_stats_splits_stat CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.TeamStats_stats_splits_stat();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "evGGARatio", n => { EvGGARatio = n.GetFloatValue(); } },
                { "faceOffWinPercentage", n => { FaceOffWinPercentage = n.GetStringValue(); } },
                { "faceOffsLost", n => { FaceOffsLost = n.GetDoubleValue(); } },
                { "faceOffsTaken", n => { FaceOffsTaken = n.GetDoubleValue(); } },
                { "faceOffsWon", n => { FaceOffsWon = n.GetDoubleValue(); } },
                { "gamesPlayed", n => { GamesPlayed = n.GetDoubleValue(); } },
                { "goalsAgainstPerGame", n => { GoalsAgainstPerGame = n.GetFloatValue(); } },
                { "goalsPerGame", n => { GoalsPerGame = n.GetFloatValue(); } },
                { "losses", n => { Losses = n.GetDoubleValue(); } },
                { "ot", n => { Ot = n.GetDoubleValue(); } },
                { "penaltyKillPercentage", n => { PenaltyKillPercentage = n.GetStringValue(); } },
                { "powerPlayGoals", n => { PowerPlayGoals = n.GetDoubleValue(); } },
                { "powerPlayGoalsAgainst", n => { PowerPlayGoalsAgainst = n.GetDoubleValue(); } },
                { "powerPlayOpportunities", n => { PowerPlayOpportunities = n.GetDoubleValue(); } },
                { "powerPlayPercentage", n => { PowerPlayPercentage = n.GetStringValue(); } },
                { "ptPctg", n => { PtPctg = n.GetStringValue(); } },
                { "pts", n => { Pts = n.GetDoubleValue(); } },
                { "savePctg", n => { SavePctg = n.GetFloatValue(); } },
                { "shootingPctg", n => { ShootingPctg = n.GetFloatValue(); } },
                { "shotsAllowed", n => { ShotsAllowed = n.GetFloatValue(); } },
                { "shotsPerGame", n => { ShotsPerGame = n.GetFloatValue(); } },
                { "winLeadFirstPer", n => { WinLeadFirstPer = n.GetFloatValue(); } },
                { "winLeadSecondPer", n => { WinLeadSecondPer = n.GetFloatValue(); } },
                { "winOppScoreFirst", n => { WinOppScoreFirst = n.GetFloatValue(); } },
                { "winOutshootOpp", n => { WinOutshootOpp = n.GetFloatValue(); } },
                { "winOutshotByOpp", n => { WinOutshotByOpp = n.GetFloatValue(); } },
                { "winScoreFirst", n => { WinScoreFirst = n.GetFloatValue(); } },
                { "wins", n => { Wins = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("evGGARatio", EvGGARatio);
            writer.WriteDoubleValue("faceOffsLost", FaceOffsLost);
            writer.WriteDoubleValue("faceOffsTaken", FaceOffsTaken);
            writer.WriteDoubleValue("faceOffsWon", FaceOffsWon);
            writer.WriteStringValue("faceOffWinPercentage", FaceOffWinPercentage);
            writer.WriteDoubleValue("gamesPlayed", GamesPlayed);
            writer.WriteFloatValue("goalsAgainstPerGame", GoalsAgainstPerGame);
            writer.WriteFloatValue("goalsPerGame", GoalsPerGame);
            writer.WriteDoubleValue("losses", Losses);
            writer.WriteDoubleValue("ot", Ot);
            writer.WriteStringValue("penaltyKillPercentage", PenaltyKillPercentage);
            writer.WriteDoubleValue("powerPlayGoals", PowerPlayGoals);
            writer.WriteDoubleValue("powerPlayGoalsAgainst", PowerPlayGoalsAgainst);
            writer.WriteDoubleValue("powerPlayOpportunities", PowerPlayOpportunities);
            writer.WriteStringValue("powerPlayPercentage", PowerPlayPercentage);
            writer.WriteStringValue("ptPctg", PtPctg);
            writer.WriteDoubleValue("pts", Pts);
            writer.WriteFloatValue("savePctg", SavePctg);
            writer.WriteFloatValue("shootingPctg", ShootingPctg);
            writer.WriteFloatValue("shotsAllowed", ShotsAllowed);
            writer.WriteFloatValue("shotsPerGame", ShotsPerGame);
            writer.WriteFloatValue("winLeadFirstPer", WinLeadFirstPer);
            writer.WriteFloatValue("winLeadSecondPer", WinLeadSecondPer);
            writer.WriteFloatValue("winOppScoreFirst", WinOppScoreFirst);
            writer.WriteFloatValue("winOutshootOpp", WinOutshootOpp);
            writer.WriteFloatValue("winOutshotByOpp", WinOutshotByOpp);
            writer.WriteDoubleValue("wins", Wins);
            writer.WriteFloatValue("winScoreFirst", WinScoreFirst);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

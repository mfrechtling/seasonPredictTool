// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GameMediaNHLTV_items : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The callLetters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallLetters { get; set; }
#nullable restore
#else
        public string CallLetters { get; set; }
#endif
        /// <summary>The eventId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventId { get; set; }
#nullable restore
#else
        public string EventId { get; set; }
#endif
        /// <summary>The feedName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FeedName { get; set; }
#nullable restore
#else
        public string FeedName { get; set; }
#endif
        /// <summary>The freeGame property</summary>
        public bool? FreeGame { get; set; }
        /// <summary>The gamePlus property</summary>
        public bool? GamePlus { get; set; }
        /// <summary>The guid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Guid { get; set; }
#nullable restore
#else
        public string Guid { get; set; }
#endif
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The mediaFeedType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaFeedType { get; set; }
#nullable restore
#else
        public string MediaFeedType { get; set; }
#endif
        /// <summary>The mediaPlaybackId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaPlaybackId { get; set; }
#nullable restore
#else
        public string MediaPlaybackId { get; set; }
#endif
        /// <summary>The mediaState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaState { get; set; }
#nullable restore
#else
        public string MediaState { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.GameMediaNHLTV_items"/> and sets the default values.
        /// </summary>
        public GameMediaNHLTV_items()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.GameMediaNHLTV_items"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.GameMediaNHLTV_items CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.GameMediaNHLTV_items();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "callLetters", n => { CallLetters = n.GetStringValue(); } },
                { "eventId", n => { EventId = n.GetStringValue(); } },
                { "feedName", n => { FeedName = n.GetStringValue(); } },
                { "freeGame", n => { FreeGame = n.GetBoolValue(); } },
                { "gamePlus", n => { GamePlus = n.GetBoolValue(); } },
                { "guid", n => { Guid = n.GetStringValue(); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "mediaFeedType", n => { MediaFeedType = n.GetStringValue(); } },
                { "mediaPlaybackId", n => { MediaPlaybackId = n.GetStringValue(); } },
                { "mediaState", n => { MediaState = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("callLetters", CallLetters);
            writer.WriteStringValue("eventId", EventId);
            writer.WriteStringValue("feedName", FeedName);
            writer.WriteBoolValue("freeGame", FreeGame);
            writer.WriteBoolValue("gamePlus", GamePlus);
            writer.WriteStringValue("guid", Guid);
            writer.WriteStringValue("language", Language);
            writer.WriteStringValue("mediaFeedType", MediaFeedType);
            writer.WriteStringValue("mediaPlaybackId", MediaPlaybackId);
            writer.WriteStringValue("mediaState", MediaState);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

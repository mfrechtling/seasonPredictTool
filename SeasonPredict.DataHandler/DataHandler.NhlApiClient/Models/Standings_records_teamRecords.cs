// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Standings_records_teamRecords : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The conferenceRank property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConferenceRank { get; set; }
#nullable restore
#else
        public string ConferenceRank { get; set; }
#endif
        /// <summary>The divisionRank property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DivisionRank { get; set; }
#nullable restore
#else
        public string DivisionRank { get; set; }
#endif
        /// <summary>The gamesPlayed property</summary>
        public double? GamesPlayed { get; set; }
        /// <summary>The goalsAgainst property</summary>
        public double? GoalsAgainst { get; set; }
        /// <summary>The goalsScored property</summary>
        public double? GoalsScored { get; set; }
        /// <summary>The lastUpdated property</summary>
        public DateTimeOffset? LastUpdated { get; set; }
        /// <summary>The leagueRank property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LeagueRank { get; set; }
#nullable restore
#else
        public string LeagueRank { get; set; }
#endif
        /// <summary>The leagueRecord property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_leagueRecord? LeagueRecord { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_leagueRecord LeagueRecord { get; set; }
#endif
        /// <summary>The points property</summary>
        public double? Points { get; set; }
        /// <summary>The row property</summary>
        public double? Row { get; set; }
        /// <summary>The streak property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_streak? Streak { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_streak Streak { get; set; }
#endif
        /// <summary>The team property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_team? Team { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_team Team { get; set; }
#endif
        /// <summary>The wildCardRank property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WildCardRank { get; set; }
#nullable restore
#else
        public string WildCardRank { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords"/> and sets the default values.
        /// </summary>
        public Standings_records_teamRecords()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "conferenceRank", n => { ConferenceRank = n.GetStringValue(); } },
                { "divisionRank", n => { DivisionRank = n.GetStringValue(); } },
                { "gamesPlayed", n => { GamesPlayed = n.GetDoubleValue(); } },
                { "goalsAgainst", n => { GoalsAgainst = n.GetDoubleValue(); } },
                { "goalsScored", n => { GoalsScored = n.GetDoubleValue(); } },
                { "lastUpdated", n => { LastUpdated = n.GetDateTimeOffsetValue(); } },
                { "leagueRank", n => { LeagueRank = n.GetStringValue(); } },
                { "leagueRecord", n => { LeagueRecord = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_leagueRecord>(global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_leagueRecord.CreateFromDiscriminatorValue); } },
                { "points", n => { Points = n.GetDoubleValue(); } },
                { "row", n => { Row = n.GetDoubleValue(); } },
                { "streak", n => { Streak = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_streak>(global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_streak.CreateFromDiscriminatorValue); } },
                { "team", n => { Team = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_team>(global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_team.CreateFromDiscriminatorValue); } },
                { "wildCardRank", n => { WildCardRank = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("conferenceRank", ConferenceRank);
            writer.WriteStringValue("divisionRank", DivisionRank);
            writer.WriteDoubleValue("gamesPlayed", GamesPlayed);
            writer.WriteDoubleValue("goalsAgainst", GoalsAgainst);
            writer.WriteDoubleValue("goalsScored", GoalsScored);
            writer.WriteDateTimeOffsetValue("lastUpdated", LastUpdated);
            writer.WriteStringValue("leagueRank", LeagueRank);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_leagueRecord>("leagueRecord", LeagueRecord);
            writer.WriteDoubleValue("points", Points);
            writer.WriteDoubleValue("row", Row);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_streak>("streak", Streak);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.Standings_records_teamRecords_team>("team", Team);
            writer.WriteStringValue("wildCardRank", WildCardRank);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

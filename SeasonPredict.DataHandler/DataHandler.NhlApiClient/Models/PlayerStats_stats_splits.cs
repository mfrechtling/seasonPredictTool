// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayerStats_stats_splits : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dayOfWeek property</summary>
        public double? DayOfWeek { get; set; }
        /// <summary>The isHome property</summary>
        public bool? IsHome { get; set; }
        /// <summary>The isOT property</summary>
        public bool? IsOT { get; set; }
        /// <summary>The isWin property</summary>
        public bool? IsWin { get; set; }
        /// <summary>The month property</summary>
        public double? Month { get; set; }
        /// <summary>The opponent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponent? Opponent { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponent Opponent { get; set; }
#endif
        /// <summary>The opponentConference property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentConference? OpponentConference { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentConference OpponentConference { get; set; }
#endif
        /// <summary>The opponentDivision property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentDivision? OpponentDivision { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentDivision OpponentDivision { get; set; }
#endif
        /// <summary>The season property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Season { get; set; }
#nullable restore
#else
        public string Season { get; set; }
#endif
        /// <summary>The stat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat? Stat { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat Stat { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits"/> and sets the default values.
        /// </summary>
        public PlayerStats_stats_splits()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dayOfWeek", n => { DayOfWeek = n.GetDoubleValue(); } },
                { "isHome", n => { IsHome = n.GetBoolValue(); } },
                { "isOT", n => { IsOT = n.GetBoolValue(); } },
                { "isWin", n => { IsWin = n.GetBoolValue(); } },
                { "month", n => { Month = n.GetDoubleValue(); } },
                { "opponent", n => { Opponent = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponent>(global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponent.CreateFromDiscriminatorValue); } },
                { "opponentConference", n => { OpponentConference = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentConference>(global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentConference.CreateFromDiscriminatorValue); } },
                { "opponentDivision", n => { OpponentDivision = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentDivision>(global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentDivision.CreateFromDiscriminatorValue); } },
                { "season", n => { Season = n.GetStringValue(); } },
                { "stat", n => { Stat = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat>(global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("dayOfWeek", DayOfWeek);
            writer.WriteBoolValue("isHome", IsHome);
            writer.WriteBoolValue("isOT", IsOT);
            writer.WriteBoolValue("isWin", IsWin);
            writer.WriteDoubleValue("month", Month);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponent>("opponent", Opponent);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentConference>("opponentConference", OpponentConference);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_opponentDivision>("opponentDivision", OpponentDivision);
            writer.WriteStringValue("season", Season);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat>("stat", Stat);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

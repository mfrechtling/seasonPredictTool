// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GameBoxscoreTeam_players_stats_skaterStats : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assists property</summary>
        public double? Assists { get; set; }
        /// <summary>The blocked property</summary>
        public double? Blocked { get; set; }
        /// <summary>The evenTimeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EvenTimeOnIce { get; set; }
#nullable restore
#else
        public string EvenTimeOnIce { get; set; }
#endif
        /// <summary>The faceoffTaken property</summary>
        public double? FaceoffTaken { get; set; }
        /// <summary>The faceOffWins property</summary>
        public double? FaceOffWins { get; set; }
        /// <summary>The giveaways property</summary>
        public double? Giveaways { get; set; }
        /// <summary>The goals property</summary>
        public double? Goals { get; set; }
        /// <summary>The hits property</summary>
        public double? Hits { get; set; }
        /// <summary>The penaltyMinutes property</summary>
        public double? PenaltyMinutes { get; set; }
        /// <summary>The plusMinus property</summary>
        public double? PlusMinus { get; set; }
        /// <summary>The powerPlayAssists property</summary>
        public double? PowerPlayAssists { get; set; }
        /// <summary>The powerPlayGoals property</summary>
        public double? PowerPlayGoals { get; set; }
        /// <summary>The powerPlayTimeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PowerPlayTimeOnIce { get; set; }
#nullable restore
#else
        public string PowerPlayTimeOnIce { get; set; }
#endif
        /// <summary>The shortHandedAssists property</summary>
        public double? ShortHandedAssists { get; set; }
        /// <summary>The shortHandedGoals property</summary>
        public double? ShortHandedGoals { get; set; }
        /// <summary>The shortHandedTimeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortHandedTimeOnIce { get; set; }
#nullable restore
#else
        public string ShortHandedTimeOnIce { get; set; }
#endif
        /// <summary>The shots property</summary>
        public double? Shots { get; set; }
        /// <summary>The takeaways property</summary>
        public double? Takeaways { get; set; }
        /// <summary>The timeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeOnIce { get; set; }
#nullable restore
#else
        public string TimeOnIce { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.GameBoxscoreTeam_players_stats_skaterStats"/> and sets the default values.
        /// </summary>
        public GameBoxscoreTeam_players_stats_skaterStats()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.GameBoxscoreTeam_players_stats_skaterStats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.GameBoxscoreTeam_players_stats_skaterStats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.GameBoxscoreTeam_players_stats_skaterStats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assists", n => { Assists = n.GetDoubleValue(); } },
                { "blocked", n => { Blocked = n.GetDoubleValue(); } },
                { "evenTimeOnIce", n => { EvenTimeOnIce = n.GetStringValue(); } },
                { "faceOffWins", n => { FaceOffWins = n.GetDoubleValue(); } },
                { "faceoffTaken", n => { FaceoffTaken = n.GetDoubleValue(); } },
                { "giveaways", n => { Giveaways = n.GetDoubleValue(); } },
                { "goals", n => { Goals = n.GetDoubleValue(); } },
                { "hits", n => { Hits = n.GetDoubleValue(); } },
                { "penaltyMinutes", n => { PenaltyMinutes = n.GetDoubleValue(); } },
                { "plusMinus", n => { PlusMinus = n.GetDoubleValue(); } },
                { "powerPlayAssists", n => { PowerPlayAssists = n.GetDoubleValue(); } },
                { "powerPlayGoals", n => { PowerPlayGoals = n.GetDoubleValue(); } },
                { "powerPlayTimeOnIce", n => { PowerPlayTimeOnIce = n.GetStringValue(); } },
                { "shortHandedAssists", n => { ShortHandedAssists = n.GetDoubleValue(); } },
                { "shortHandedGoals", n => { ShortHandedGoals = n.GetDoubleValue(); } },
                { "shortHandedTimeOnIce", n => { ShortHandedTimeOnIce = n.GetStringValue(); } },
                { "shots", n => { Shots = n.GetDoubleValue(); } },
                { "takeaways", n => { Takeaways = n.GetDoubleValue(); } },
                { "timeOnIce", n => { TimeOnIce = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("assists", Assists);
            writer.WriteDoubleValue("blocked", Blocked);
            writer.WriteStringValue("evenTimeOnIce", EvenTimeOnIce);
            writer.WriteDoubleValue("faceoffTaken", FaceoffTaken);
            writer.WriteDoubleValue("faceOffWins", FaceOffWins);
            writer.WriteDoubleValue("giveaways", Giveaways);
            writer.WriteDoubleValue("goals", Goals);
            writer.WriteDoubleValue("hits", Hits);
            writer.WriteDoubleValue("penaltyMinutes", PenaltyMinutes);
            writer.WriteDoubleValue("plusMinus", PlusMinus);
            writer.WriteDoubleValue("powerPlayAssists", PowerPlayAssists);
            writer.WriteDoubleValue("powerPlayGoals", PowerPlayGoals);
            writer.WriteStringValue("powerPlayTimeOnIce", PowerPlayTimeOnIce);
            writer.WriteDoubleValue("shortHandedAssists", ShortHandedAssists);
            writer.WriteDoubleValue("shortHandedGoals", ShortHandedGoals);
            writer.WriteStringValue("shortHandedTimeOnIce", ShortHandedTimeOnIce);
            writer.WriteDoubleValue("shots", Shots);
            writer.WriteDoubleValue("takeaways", Takeaways);
            writer.WriteStringValue("timeOnIce", TimeOnIce);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DraftProspect : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amateurLeague property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.DraftProspect_amateurLeague? AmateurLeague { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.DraftProspect_amateurLeague AmateurLeague { get; set; }
#endif
        /// <summary>The amateurTeam property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.DraftProspect_amateurTeam? AmateurTeam { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.DraftProspect_amateurTeam AmateurTeam { get; set; }
#endif
        /// <summary>The birthCity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BirthCity { get; set; }
#nullable restore
#else
        public string BirthCity { get; set; }
#endif
        /// <summary>The birthCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BirthCountry { get; set; }
#nullable restore
#else
        public string BirthCountry { get; set; }
#endif
        /// <summary>The birthDate property</summary>
        public Date? BirthDate { get; set; }
        /// <summary>The firstName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstName { get; set; }
#nullable restore
#else
        public string FirstName { get; set; }
#endif
        /// <summary>The fullName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullName { get; set; }
#nullable restore
#else
        public string FullName { get; set; }
#endif
        /// <summary>The height property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Height { get; set; }
#nullable restore
#else
        public string Height { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The lastName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastName { get; set; }
#nullable restore
#else
        public string LastName { get; set; }
#endif
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The nationality property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nationality { get; set; }
#nullable restore
#else
        public string Nationality { get; set; }
#endif
        /// <summary>The primaryPosition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.DraftProspect_primaryPosition? PrimaryPosition { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.DraftProspect_primaryPosition PrimaryPosition { get; set; }
#endif
        /// <summary>The prospectCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.DraftProspect_prospectCategory? ProspectCategory { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.DraftProspect_prospectCategory ProspectCategory { get; set; }
#endif
        /// <summary>The ranks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.DraftProspect_ranks? Ranks { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.DraftProspect_ranks Ranks { get; set; }
#endif
        /// <summary>The shootsCatches property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShootsCatches { get; set; }
#nullable restore
#else
        public string ShootsCatches { get; set; }
#endif
        /// <summary>The weight property</summary>
        public double? Weight { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.DraftProspect"/> and sets the default values.
        /// </summary>
        public DraftProspect()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.DraftProspect"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.DraftProspect CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.DraftProspect();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amateurLeague", n => { AmateurLeague = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_amateurLeague>(global::DataHandler.NhlApiClient.Models.DraftProspect_amateurLeague.CreateFromDiscriminatorValue); } },
                { "amateurTeam", n => { AmateurTeam = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_amateurTeam>(global::DataHandler.NhlApiClient.Models.DraftProspect_amateurTeam.CreateFromDiscriminatorValue); } },
                { "birthCity", n => { BirthCity = n.GetStringValue(); } },
                { "birthCountry", n => { BirthCountry = n.GetStringValue(); } },
                { "birthDate", n => { BirthDate = n.GetDateValue(); } },
                { "firstName", n => { FirstName = n.GetStringValue(); } },
                { "fullName", n => { FullName = n.GetStringValue(); } },
                { "height", n => { Height = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "lastName", n => { LastName = n.GetStringValue(); } },
                { "link", n => { Link = n.GetStringValue(); } },
                { "nationality", n => { Nationality = n.GetStringValue(); } },
                { "primaryPosition", n => { PrimaryPosition = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_primaryPosition>(global::DataHandler.NhlApiClient.Models.DraftProspect_primaryPosition.CreateFromDiscriminatorValue); } },
                { "prospectCategory", n => { ProspectCategory = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_prospectCategory>(global::DataHandler.NhlApiClient.Models.DraftProspect_prospectCategory.CreateFromDiscriminatorValue); } },
                { "ranks", n => { Ranks = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_ranks>(global::DataHandler.NhlApiClient.Models.DraftProspect_ranks.CreateFromDiscriminatorValue); } },
                { "shootsCatches", n => { ShootsCatches = n.GetStringValue(); } },
                { "weight", n => { Weight = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_amateurLeague>("amateurLeague", AmateurLeague);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_amateurTeam>("amateurTeam", AmateurTeam);
            writer.WriteStringValue("birthCity", BirthCity);
            writer.WriteStringValue("birthCountry", BirthCountry);
            writer.WriteDateValue("birthDate", BirthDate);
            writer.WriteStringValue("firstName", FirstName);
            writer.WriteStringValue("fullName", FullName);
            writer.WriteStringValue("height", Height);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("lastName", LastName);
            writer.WriteStringValue("link", Link);
            writer.WriteStringValue("nationality", Nationality);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_primaryPosition>("primaryPosition", PrimaryPosition);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_prospectCategory>("prospectCategory", ProspectCategory);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.DraftProspect_ranks>("ranks", Ranks);
            writer.WriteStringValue("shootsCatches", ShootsCatches);
            writer.WriteDoubleValue("weight", Weight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

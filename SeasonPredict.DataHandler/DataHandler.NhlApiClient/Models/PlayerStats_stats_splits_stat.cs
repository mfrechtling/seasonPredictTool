// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlayerStats_stats_splits_stat : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The assists property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Assists { get; set; }
#nullable restore
#else
        public string Assists { get; set; }
#endif
        /// <summary>The blocked property</summary>
        public double? Blocked { get; set; }
        /// <summary>The evenTimeOnIce property</summary>
        public double? EvenTimeOnIce { get; set; }
        /// <summary>The evenTimeOnIcePerGame property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EvenTimeOnIcePerGame { get; set; }
#nullable restore
#else
        public string EvenTimeOnIcePerGame { get; set; }
#endif
        /// <summary>The faceOffPct property</summary>
        public double? FaceOffPct { get; set; }
        /// <summary>The games property</summary>
        public double? Games { get; set; }
        /// <summary>The gameWinningGoals property</summary>
        public double? GameWinningGoals { get; set; }
        /// <summary>The goals property</summary>
        public double? Goals { get; set; }
        /// <summary>The goalsInFirstPeriod property</summary>
        public double? GoalsInFirstPeriod { get; set; }
        /// <summary>The goalsInSecondPeriod property</summary>
        public double? GoalsInSecondPeriod { get; set; }
        /// <summary>The goalsInThirdPeriod property</summary>
        public double? GoalsInThirdPeriod { get; set; }
        /// <summary>The goalsLeadingByOne property</summary>
        public double? GoalsLeadingByOne { get; set; }
        /// <summary>The goalsLeadingByTwo property</summary>
        public double? GoalsLeadingByTwo { get; set; }
        /// <summary>The goalsTrailingByOne property</summary>
        public double? GoalsTrailingByOne { get; set; }
        /// <summary>The goalsTrailingByThreePlus property</summary>
        public double? GoalsTrailingByThreePlus { get; set; }
        /// <summary>The goalsTrailingByTwo property</summary>
        public double? GoalsTrailingByTwo { get; set; }
        /// <summary>The goalsWhenTied property</summary>
        public double? GoalsWhenTied { get; set; }
        /// <summary>The hits property</summary>
        public double? Hits { get; set; }
        /// <summary>The overTimeGoals property</summary>
        public double? OverTimeGoals { get; set; }
        /// <summary>The penaltyMinutes property</summary>
        public double? PenaltyMinutes { get; set; }
        /// <summary>The pim property</summary>
        public double? Pim { get; set; }
        /// <summary>The plusMinus property</summary>
        public double? PlusMinus { get; set; }
        /// <summary>The points property</summary>
        public double? Points { get; set; }
        /// <summary>The powerPlayGoals property</summary>
        public double? PowerPlayGoals { get; set; }
        /// <summary>The powerPlayPoints property</summary>
        public double? PowerPlayPoints { get; set; }
        /// <summary>The powerPlayTimeOnIce property</summary>
        public double? PowerPlayTimeOnIce { get; set; }
        /// <summary>The powerPlayTimeOnIcePerGame property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PowerPlayTimeOnIcePerGame { get; set; }
#nullable restore
#else
        public string PowerPlayTimeOnIcePerGame { get; set; }
#endif
        /// <summary>The rankAssists property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankAssists { get; set; }
#nullable restore
#else
        public string RankAssists { get; set; }
#endif
        /// <summary>The rankBlockedShots property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankBlockedShots { get; set; }
#nullable restore
#else
        public string RankBlockedShots { get; set; }
#endif
        /// <summary>The rankGamesPlayed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankGamesPlayed { get; set; }
#nullable restore
#else
        public string RankGamesPlayed { get; set; }
#endif
        /// <summary>The rankGoals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankGoals { get; set; }
#nullable restore
#else
        public string RankGoals { get; set; }
#endif
        /// <summary>The rankHits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankHits { get; set; }
#nullable restore
#else
        public string RankHits { get; set; }
#endif
        /// <summary>The rankOvertimeGoals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankOvertimeGoals { get; set; }
#nullable restore
#else
        public string RankOvertimeGoals { get; set; }
#endif
        /// <summary>The rankPenaltyMinutes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankPenaltyMinutes { get; set; }
#nullable restore
#else
        public string RankPenaltyMinutes { get; set; }
#endif
        /// <summary>The rankPlusMinus property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankPlusMinus { get; set; }
#nullable restore
#else
        public string RankPlusMinus { get; set; }
#endif
        /// <summary>The rankPoints property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankPoints { get; set; }
#nullable restore
#else
        public string RankPoints { get; set; }
#endif
        /// <summary>The rankPowerPlayGoals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankPowerPlayGoals { get; set; }
#nullable restore
#else
        public string RankPowerPlayGoals { get; set; }
#endif
        /// <summary>The rankShortHandedGoals property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankShortHandedGoals { get; set; }
#nullable restore
#else
        public string RankShortHandedGoals { get; set; }
#endif
        /// <summary>The rankShotPct property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankShotPct { get; set; }
#nullable restore
#else
        public string RankShotPct { get; set; }
#endif
        /// <summary>The rankShots property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RankShots { get; set; }
#nullable restore
#else
        public string RankShots { get; set; }
#endif
        /// <summary>The shifts property</summary>
        public double? Shifts { get; set; }
        /// <summary>The shortHandedGoals property</summary>
        public double? ShortHandedGoals { get; set; }
        /// <summary>The shortHandedPoints property</summary>
        public double? ShortHandedPoints { get; set; }
        /// <summary>The shortHandedTimeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortHandedTimeOnIce { get; set; }
#nullable restore
#else
        public string ShortHandedTimeOnIce { get; set; }
#endif
        /// <summary>The shortHandedTimeOnIcePerGame property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortHandedTimeOnIcePerGame { get; set; }
#nullable restore
#else
        public string ShortHandedTimeOnIcePerGame { get; set; }
#endif
        /// <summary>The shotPct property</summary>
        public float? ShotPct { get; set; }
        /// <summary>The shots property</summary>
        public double? Shots { get; set; }
        /// <summary>The timeOnIce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeOnIce { get; set; }
#nullable restore
#else
        public string TimeOnIce { get; set; }
#endif
        /// <summary>The timeOnIcePerGame property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeOnIcePerGame { get; set; }
#nullable restore
#else
        public string TimeOnIcePerGame { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat"/> and sets the default values.
        /// </summary>
        public PlayerStats_stats_splits_stat()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.PlayerStats_stats_splits_stat();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "assists", n => { Assists = n.GetStringValue(); } },
                { "blocked", n => { Blocked = n.GetDoubleValue(); } },
                { "evenTimeOnIce", n => { EvenTimeOnIce = n.GetDoubleValue(); } },
                { "evenTimeOnIcePerGame", n => { EvenTimeOnIcePerGame = n.GetStringValue(); } },
                { "faceOffPct", n => { FaceOffPct = n.GetDoubleValue(); } },
                { "gameWinningGoals", n => { GameWinningGoals = n.GetDoubleValue(); } },
                { "games", n => { Games = n.GetDoubleValue(); } },
                { "goals", n => { Goals = n.GetDoubleValue(); } },
                { "goalsInFirstPeriod", n => { GoalsInFirstPeriod = n.GetDoubleValue(); } },
                { "goalsInSecondPeriod", n => { GoalsInSecondPeriod = n.GetDoubleValue(); } },
                { "goalsInThirdPeriod", n => { GoalsInThirdPeriod = n.GetDoubleValue(); } },
                { "goalsLeadingByOne", n => { GoalsLeadingByOne = n.GetDoubleValue(); } },
                { "goalsLeadingByTwo", n => { GoalsLeadingByTwo = n.GetDoubleValue(); } },
                { "goalsTrailingByOne", n => { GoalsTrailingByOne = n.GetDoubleValue(); } },
                { "goalsTrailingByThreePlus", n => { GoalsTrailingByThreePlus = n.GetDoubleValue(); } },
                { "goalsTrailingByTwo", n => { GoalsTrailingByTwo = n.GetDoubleValue(); } },
                { "goalsWhenTied", n => { GoalsWhenTied = n.GetDoubleValue(); } },
                { "hits", n => { Hits = n.GetDoubleValue(); } },
                { "overTimeGoals", n => { OverTimeGoals = n.GetDoubleValue(); } },
                { "penaltyMinutes", n => { PenaltyMinutes = n.GetDoubleValue(); } },
                { "pim", n => { Pim = n.GetDoubleValue(); } },
                { "plusMinus", n => { PlusMinus = n.GetDoubleValue(); } },
                { "points", n => { Points = n.GetDoubleValue(); } },
                { "powerPlayGoals", n => { PowerPlayGoals = n.GetDoubleValue(); } },
                { "powerPlayPoints", n => { PowerPlayPoints = n.GetDoubleValue(); } },
                { "powerPlayTimeOnIce", n => { PowerPlayTimeOnIce = n.GetDoubleValue(); } },
                { "powerPlayTimeOnIcePerGame", n => { PowerPlayTimeOnIcePerGame = n.GetStringValue(); } },
                { "rankAssists", n => { RankAssists = n.GetStringValue(); } },
                { "rankBlockedShots", n => { RankBlockedShots = n.GetStringValue(); } },
                { "rankGamesPlayed", n => { RankGamesPlayed = n.GetStringValue(); } },
                { "rankGoals", n => { RankGoals = n.GetStringValue(); } },
                { "rankHits", n => { RankHits = n.GetStringValue(); } },
                { "rankOvertimeGoals", n => { RankOvertimeGoals = n.GetStringValue(); } },
                { "rankPenaltyMinutes", n => { RankPenaltyMinutes = n.GetStringValue(); } },
                { "rankPlusMinus", n => { RankPlusMinus = n.GetStringValue(); } },
                { "rankPoints", n => { RankPoints = n.GetStringValue(); } },
                { "rankPowerPlayGoals", n => { RankPowerPlayGoals = n.GetStringValue(); } },
                { "rankShortHandedGoals", n => { RankShortHandedGoals = n.GetStringValue(); } },
                { "rankShotPct", n => { RankShotPct = n.GetStringValue(); } },
                { "rankShots", n => { RankShots = n.GetStringValue(); } },
                { "shifts", n => { Shifts = n.GetDoubleValue(); } },
                { "shortHandedGoals", n => { ShortHandedGoals = n.GetDoubleValue(); } },
                { "shortHandedPoints", n => { ShortHandedPoints = n.GetDoubleValue(); } },
                { "shortHandedTimeOnIce", n => { ShortHandedTimeOnIce = n.GetStringValue(); } },
                { "shortHandedTimeOnIcePerGame", n => { ShortHandedTimeOnIcePerGame = n.GetStringValue(); } },
                { "shotPct", n => { ShotPct = n.GetFloatValue(); } },
                { "shots", n => { Shots = n.GetDoubleValue(); } },
                { "timeOnIce", n => { TimeOnIce = n.GetStringValue(); } },
                { "timeOnIcePerGame", n => { TimeOnIcePerGame = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("assists", Assists);
            writer.WriteDoubleValue("blocked", Blocked);
            writer.WriteDoubleValue("evenTimeOnIce", EvenTimeOnIce);
            writer.WriteStringValue("evenTimeOnIcePerGame", EvenTimeOnIcePerGame);
            writer.WriteDoubleValue("faceOffPct", FaceOffPct);
            writer.WriteDoubleValue("games", Games);
            writer.WriteDoubleValue("gameWinningGoals", GameWinningGoals);
            writer.WriteDoubleValue("goals", Goals);
            writer.WriteDoubleValue("goalsInFirstPeriod", GoalsInFirstPeriod);
            writer.WriteDoubleValue("goalsInSecondPeriod", GoalsInSecondPeriod);
            writer.WriteDoubleValue("goalsInThirdPeriod", GoalsInThirdPeriod);
            writer.WriteDoubleValue("goalsLeadingByOne", GoalsLeadingByOne);
            writer.WriteDoubleValue("goalsLeadingByTwo", GoalsLeadingByTwo);
            writer.WriteDoubleValue("goalsTrailingByOne", GoalsTrailingByOne);
            writer.WriteDoubleValue("goalsTrailingByThreePlus", GoalsTrailingByThreePlus);
            writer.WriteDoubleValue("goalsTrailingByTwo", GoalsTrailingByTwo);
            writer.WriteDoubleValue("goalsWhenTied", GoalsWhenTied);
            writer.WriteDoubleValue("hits", Hits);
            writer.WriteDoubleValue("overTimeGoals", OverTimeGoals);
            writer.WriteDoubleValue("penaltyMinutes", PenaltyMinutes);
            writer.WriteDoubleValue("pim", Pim);
            writer.WriteDoubleValue("plusMinus", PlusMinus);
            writer.WriteDoubleValue("points", Points);
            writer.WriteDoubleValue("powerPlayGoals", PowerPlayGoals);
            writer.WriteDoubleValue("powerPlayPoints", PowerPlayPoints);
            writer.WriteDoubleValue("powerPlayTimeOnIce", PowerPlayTimeOnIce);
            writer.WriteStringValue("powerPlayTimeOnIcePerGame", PowerPlayTimeOnIcePerGame);
            writer.WriteStringValue("rankAssists", RankAssists);
            writer.WriteStringValue("rankBlockedShots", RankBlockedShots);
            writer.WriteStringValue("rankGamesPlayed", RankGamesPlayed);
            writer.WriteStringValue("rankGoals", RankGoals);
            writer.WriteStringValue("rankHits", RankHits);
            writer.WriteStringValue("rankOvertimeGoals", RankOvertimeGoals);
            writer.WriteStringValue("rankPenaltyMinutes", RankPenaltyMinutes);
            writer.WriteStringValue("rankPlusMinus", RankPlusMinus);
            writer.WriteStringValue("rankPoints", RankPoints);
            writer.WriteStringValue("rankPowerPlayGoals", RankPowerPlayGoals);
            writer.WriteStringValue("rankShortHandedGoals", RankShortHandedGoals);
            writer.WriteStringValue("rankShotPct", RankShotPct);
            writer.WriteStringValue("rankShots", RankShots);
            writer.WriteDoubleValue("shifts", Shifts);
            writer.WriteDoubleValue("shortHandedGoals", ShortHandedGoals);
            writer.WriteDoubleValue("shortHandedPoints", ShortHandedPoints);
            writer.WriteStringValue("shortHandedTimeOnIce", ShortHandedTimeOnIce);
            writer.WriteStringValue("shortHandedTimeOnIcePerGame", ShortHandedTimeOnIcePerGame);
            writer.WriteFloatValue("shotPct", ShotPct);
            writer.WriteDoubleValue("shots", Shots);
            writer.WriteStringValue("timeOnIce", TimeOnIce);
            writer.WriteStringValue("timeOnIcePerGame", TimeOnIcePerGame);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

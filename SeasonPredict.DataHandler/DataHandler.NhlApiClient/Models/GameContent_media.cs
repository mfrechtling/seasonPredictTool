// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace DataHandler.NhlApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GameContent_media : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The epg property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg>? Epg { get; set; }
#nullable restore
#else
        public List<global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg> Epg { get; set; }
#endif
        /// <summary>The milestones property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::DataHandler.NhlApiClient.Models.GameContent_media_milestones? Milestones { get; set; }
#nullable restore
#else
        public global::DataHandler.NhlApiClient.Models.GameContent_media_milestones Milestones { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Models.GameContent_media"/> and sets the default values.
        /// </summary>
        public GameContent_media()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.GameContent_media"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::DataHandler.NhlApiClient.Models.GameContent_media CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::DataHandler.NhlApiClient.Models.GameContent_media();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "epg", n => { Epg = n.GetCollectionOfObjectValues<global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg>(global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg.CreateFromDiscriminatorValue)?.AsList(); } },
                { "milestones", n => { Milestones = n.GetObjectValue<global::DataHandler.NhlApiClient.Models.GameContent_media_milestones>(global::DataHandler.NhlApiClient.Models.GameContent_media_milestones.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg>("epg", Epg);
            writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.GameContent_media_milestones>("milestones", Milestones);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::DataHandler.NhlApiClient.Models.GameHighlightType"/>, <see cref="global::DataHandler.NhlApiClient.Models.GameMediaAudio"/>, <see cref="global::DataHandler.NhlApiClient.Models.GameMediaNHLTV"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GameContent_media_epg : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::DataHandler.NhlApiClient.Models.GameHighlightType"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DataHandler.NhlApiClient.Models.GameHighlightType? GameHighlightType { get; set; }
#nullable restore
#else
            public global::DataHandler.NhlApiClient.Models.GameHighlightType GameHighlightType { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DataHandler.NhlApiClient.Models.GameMediaAudio"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DataHandler.NhlApiClient.Models.GameMediaAudio? GameMediaAudio { get; set; }
#nullable restore
#else
            public global::DataHandler.NhlApiClient.Models.GameMediaAudio GameMediaAudio { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::DataHandler.NhlApiClient.Models.GameMediaNHLTV"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::DataHandler.NhlApiClient.Models.GameMediaNHLTV? GameMediaNHLTV { get; set; }
#nullable restore
#else
            public global::DataHandler.NhlApiClient.Models.GameMediaNHLTV GameMediaNHLTV { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::DataHandler.NhlApiClient.Models.GameContent_media.GameContent_media_epg();
                result.GameHighlightType = new global::DataHandler.NhlApiClient.Models.GameHighlightType();
                result.GameMediaAudio = new global::DataHandler.NhlApiClient.Models.GameMediaAudio();
                result.GameMediaNHLTV = new global::DataHandler.NhlApiClient.Models.GameMediaNHLTV();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(GameHighlightType != null || GameMediaAudio != null || GameMediaNHLTV != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(GameHighlightType, GameMediaAudio, GameMediaNHLTV);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::DataHandler.NhlApiClient.Models.GameHighlightType>(null, GameHighlightType, GameMediaAudio, GameMediaNHLTV);
            }
        }
    }
}
#pragma warning restore CS0618

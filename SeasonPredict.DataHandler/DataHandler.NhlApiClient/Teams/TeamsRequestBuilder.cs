// <auto-generated/>
#pragma warning disable CS0618
using DataHandler.NhlApiClient.Models;
using DataHandler.NhlApiClient.Teams.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace DataHandler.NhlApiClient.Teams
{
    /// <summary>
    /// Builds and executes requests for operations under \teams
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TeamsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the DataHandler.NhlApiClient.teams.item collection</summary>
        /// <param name="position">The ID of the team.</param>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder"/></returns>
        public global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the DataHandler.NhlApiClient.teams.item collection</summary>
        /// <param name="position">The ID of the team.</param>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
                return new global::DataHandler.NhlApiClient.Teams.Item.TeamsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams{?expand*,season*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TeamsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/teams{?expand*,season*}", rawUrl)
        {
        }
        /// <summary>
        /// Get all NHL teams.
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Models.Teams"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::DataHandler.NhlApiClient.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::DataHandler.NhlApiClient.Models.Teams?> GetAsync(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::DataHandler.NhlApiClient.Models.Teams> GetAsync(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::DataHandler.NhlApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::DataHandler.NhlApiClient.Models.Teams>(requestInfo, global::DataHandler.NhlApiClient.Models.Teams.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get all NHL teams.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get all NHL teams.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TeamsRequestBuilderGetQueryParameters 
        {
            /// <summary>Expand your response for some additional data.</summary>
            [Obsolete("This property is deprecated, use ExpandAsGetExpandQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand")]
            public string? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("expand")]
            public string Expand { get; set; }
#endif
            /// <summary>Expand your response for some additional data.</summary>
            [QueryParameter("expand")]
            public global::DataHandler.NhlApiClient.Teams.GetExpandQueryParameterType? ExpandAsGetExpandQueryParameterType { get; set; }
            /// <summary>Return a team&apos;s specific season.</summary>
            [QueryParameter("season")]
            public double? Season { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TeamsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::DataHandler.NhlApiClient.Teams.TeamsRequestBuilder.TeamsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
